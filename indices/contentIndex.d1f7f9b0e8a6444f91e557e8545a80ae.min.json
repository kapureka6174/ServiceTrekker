{"/":{"title":"Service Trekker","content":"\nようこそ！\n\nService Trekker は、**サービス開発に関する知識の保管庫**です。\n\nTrekker とは、「徒歩旅行者、長い困難な旅をする旅行者」という意味です。\n\nサービス開発を良くするために必要な知識は、心理学、情報工学、マーケティングなど多岐にわたります。\n\nこの膨大な知識を旅をするようにゆる〜りと学んでいく場です。\n","lastmodified":"2023-04-02T12:20:10.353847138Z","tags":[]},"/notes/ADR%E3%81%A8%E3%81%AF":{"title":"ADRとは","content":"\n## 概要\n\nArchitectural Decision Records の略で、Michael Nygard 氏（以下、マイケル）が発案したんだ。\n\nマイケルは、アメリカのソフトウェア開発者で特に大規模なシステムの設計や運用に関する専門家として知られているよ。\n\n彼は、「Relese It!」という本を出していて第２版は 2018 年に出版されているよ。日本でも「Release It! 本番用ソフトウェア製品の設計とデプロイのために」という本が出てる。\n\nADR は**アーキテクチャの決定に関するプロセスを記録する**もので、ドキュメンテーションの一つの手法として知られているよ。\n\nアーキテクチャが技術や時代の進歩だったり、いろんな要件によって変更しないといけない時にドキュメントも変えないといけないよね？でも、ドキュメントにはそのプロセスやそれらを決定するに至った経緯などを詳細に載せるとかえって理解が容易でなくなる。だから、ドキュメントには結果しか載せられない。ただ、そうすると経緯を知らない人や話し合いに参加していない人はドキュメントだけを見て「何でこんなアーキテクチャを使ってるんだ？」とか「こっちの技術を使った方がいいのに。。。」というような不満が出てきたりするのは想像できるよね。こういう問題を解決するために作られたのが、ADR ってわけさ。\n\nただ、アーキテクチャだけに縛る必要はどこにもないのさ。そう、意思決定のプロセスを残すことは往々にして未来のための財産になり得る。事実、MADR という ADR の派生系みたいなものでは、「Architectural Decision Records」ではなく「Any Decision Records」に変更されている。詳しくは[Github レポジトリ](https://github.com/adr/madr)か[ドキュメント](https://adr.github.io/madr/)を見ると良いかもね。\n\n---\n\n## 使い方（基本）\n\n詳しい使い方とかテンプレートや例などは Github のレポジトリにあるから、以下の URL を見ておくれ。ここではざっくりとした使い方を説明するよ。\n\nURL： https://github.com/joelparkerhenderson/architecture-decision-record\n\nADR は markdown で基本的には書かれることが多いよ。構成要素としては以下の 5 つがシンプルで分かりやすく、マイケルが提案しているテンプレートでもあるんだ。\n\n- タイトル(Title)\n- ステータス(Status)\n- コンテキスト(Context)\n- 決定(Decision)\n- 影響(Consequences)\n\n一応、マイケルが提案した時の投稿を貼っておくね。英語ができる人は一度読んでみてもいいかもしれないね。\n\nURL： https://cognitect.com/blog/2011/11/15/documenting-architecture-decisions\n\n一つずつ詳しく説明していくね。\n\n### タイトル(Title)\n\nADR には重複のない連番を振り、タイトルには連番を含めた短い名前をつけるんだ。例えば、「ADR 0001：CSS フレームワークは TailwindCSS を利用する」とか「ADR 0009：GCP ではなく AWS を使用する理由」みたいな感じかな。\n\n### ステータス(Status)\n\n- 合意していない場合は「提案（proposed）」\n- 合意された場合は「承認（accepted）」\n- 後に ADR を決定を変更または取り消した場合「棄却（rejected）」、置き換えられた決定を参照して「非推奨（deprecated）」または「置き換え（superseded）」とマークされることもあるよ。\n\n### コンテキスト(Context)\n\nそもそも、満たすべき要件は何なのか？どういう要素を備えているべきなのか？みたいな理想の状態を説明するんだ。\nもしくは、組織の現状やキャパシティなどでもいい、とにかく **「意思決定する上で満たすべき条件」** と **「意思決定しなければならない理由」**を書くみたいな感じかな。\n\n### 決定(Decision)\n\n決定した明確な理由、他の選択をしない理由、採用する上でどのように実現するに至るのかのプロセスなどを書こう。\n\n### 影響(Consequences)\n\n決定を適用した後のポジティブ・ネガティブどちらの影響も記録しよう。\n\nmarkdown にまとめるとこんな感じかな。\n\n```markdown\n# Title\n\n## Status\n\nproposed / accepted / rejected / deprecated / superseded\n\n## Context\n\n-\n-\n-\n\n## Decision\n\n「」\n\n## Consequences\n\nPositive\n\n-\n-\n-\n\nNegative\n\n-\n-\n-\n```\n\n---\n\n## 使い方（実践）\n\nここでは MADR の方法を学んでみようと思うよ。MADR とは Markdown and Any Decision Records の略だよ。\n\nちなみに、MADR 以外にも Y-Statements っていう分派もあるらしい。詳しくは、この [Medium](https://medium.com/olzzio/y-statements-10eb07b5a177)みてね。\n\n[ドキュメント](https://adr.github.io/madr/)にある Examples を見ていこう。\n\nドキュメントには Short Version と Long Version の二つがあり、これらを使い分けると良い見たいだね。\n\n### Short Version\n\n以下は DeepL で翻訳したものだよ。\n\n```markdown\n# 高度なテストアサーションを行うには Plain JUnit5 を使用する\n\n## コンテクストと問題提起\n\n読みやすいテストアサーションを書くには？\n高度なテストのための読みやすいテストアサーションをどのように書くか？\n\n## 考えられる選択肢\n\n- Plain JUnit5\n- Hamcrest\n- AssertJ\n\n## 決定事項\n\n選択されたオプション 「Plain JUnit5 は標準的なフレームワークであり、他のフレームワークの機能は、新しい依存関係を追加することの利点を上回らないためです。\n```\n\n- タイトル（Title）\n- コンテキストと問題提起（Context and Probrem Statement）\n- 考えられる選択肢（Considered Options）\n- 決定事項（Decision Outcome）\n\nこの 4 つで構成されていて、とてもシンプルだね。これよりももっと詳細に記録を残したい場合は以下の Long Version を使うといい。\n\n### Long Version\n\n以下は、Template から引っ張ってきたものを翻訳して、ある程度わかりやすくしたものだよ。\n\n```markdown\n---\nstatus: { 提案 | 棄却 | 承認 | 非推奨 | … | ADR-0005 \u003c0005-example.md\u003e に置き換わりました }\ndate: { YYYY-MM-DD 最終更新日 }\ndeciders: { 意思決定を行う人のリスト }\nconsulted: { 意見を求める人、および双方向のコミュニケーションが可能な人のリスト。 }\ninformed: { このADRを見るべき対象、および意思決定の議論に関わらなかった人 }\n---\n\n# 解決した問題と解決策の短いタイトル\n\n## コンテクストと問題提起\n\n例えば、2 ～ 3 文を使った自由形式や、説明的なストーリーの形で、文脈と問題提起を記述する。\n質問形式で問題を明確にし、コラボレーションボードや課題管理システムへのリンクを追加するとよいでしょう。\n\n## 意思決定要因\n\n- {意思決定要因 1、大切にしたい基準、直面している課題 …}\n- {意思決定要因 2、大切にしたい基準、直面している課題 …}\n- …\n\n## 考えられる選択肢\n\n- {選択肢 1}\n- {選択肢 2}\n- {選択肢 3}\n- …\n\n## 決定事項\n\n選択された選択肢: \"{選択肢 1}\"、理由は〜〜〜〜。\n\n### 影響\n\n- Good：ポジティブな影響 …\n- Bad：ネガティブな影響 …\n- …\n\n## 検証プロセス\n\nADR の実装がどのように検証されるか？\n例：ドラフト（decider） → レビュー（conslted） → 更新（decider）\n\n## 選択肢の長所と短所\n\n### 選択肢 2\n\n簡単な説明\n\n- Good：ポジティブな影響\n- Neutral：中立的な影響\n- Bad：ネガティブな影響\n- …\n\n…\n\n## 追加情報\n\n決定をどの期間までにどのように実現する必要があるか、または再検討する必要があるかどうかなど。\n```\n\nLong Version ではフロントマターが採用されているみたい。\n\n- status\n- date\n- deciders\n- consulted\n- informed\n\nの 5 つが基本だけど、適宜削除したり変更しても良いみたいだね。意思決定フレームワークに「DACI」なるものがあるみたいだけど、こういうのを参考にしてるのかな？🤔\n\nShort Version との違いとしては\n\n- 意思決定要因（Decision Drivers）\n- 検証プロセス（Validation）\n- 選択肢の長所と短所（Pros and Cons of the Options）\n- 追加情報（More Information）\n\nの 4 つが増えたね。\n\n検証プロセスについては、AWS の[ADR プロセス](https://docs.aws.amazon.com/prescriptive-guidance/latest/architectural-decision-records/adr-process.html)のフローチャートを見てもらった方が早いよ。\n\n紹介した全部の項目を採用する必要はないみたいなので、適宜削除したり改変したりしたら良さそうだね。\n","lastmodified":"2023-04-02T12:20:10.353847138Z","tags":[]}}